AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: Nexus Workspaces Service - Manages workspaces for multi-tenant system

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for deployment
  ServiceName:
    Type: String
    Default: nexus-workspaces
  ResourcePrefix:
    Type: String
    Default: nexus-workspaces
  IAMResourcePrefix:
    Type: String
    Default: Service-Workspaces
  AccountsTableName:
    Type: String
    Description: Name of the accounts table from the Accounts service
  LogLevel:
    Type: String
    Default: INFO
    Description: Log level for Lambda functions

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.11
    Architectures:
      - x86_64
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        SERVICE_NAME: !Ref ServiceName
        SERVICE_ENVIRONMENT: !Ref Environment
        ACCOUNTS_TABLE: !Ref AccountsTableName

Conditions:
  IsProd: !Equals [ !Ref Environment, "prod" ]
  IsNotProd: !Not [ Condition: IsProd ]

Resources:
  # Roles
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IAMResourcePrefix}-ApiRole
      Path: "/nexus/service-role/workspaces/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  # Policies
  AccountsTableCRUDPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IAMResourcePrefix}-AccountsTableCRUD
      Roles:
        - !Ref ApiRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountsTableName}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountsTableName}/*"

  # Lambda Functions for Workspace Management - each function follows single responsibility principle
  CreateWorkspaceFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-create-workspace
      CodeUri: functions/
      Handler: workspace_operations.create_workspace.create_workspace.handler
      Description: Creates a new workspace
      Role: !GetAtt ApiRole.Arn
      Events:
        CreateWorkspace:
          Type: Api
          Properties:
            Path: /accounts/{accountId}/workspaces
            Method: post

  GetWorkspaceFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-get-workspace
      CodeUri: functions/
      Handler: workspace_operations.get_workspace.get_workspace.handler
      Description: Retrieves workspace details
      Role: !GetAtt ApiRole.Arn
      Events:
        GetWorkspace:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}
            Method: get

  UpdateWorkspaceFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-update-workspace
      CodeUri: functions/
      Handler: workspace_operations.update_workspace.update_workspace.handler
      Description: Updates workspace details
      Role: !GetAtt ApiRole.Arn
      Events:
        UpdateWorkspace:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}
            Method: put

  DeleteWorkspaceFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-delete-workspace
      CodeUri: functions/
      Handler: workspace_operations.delete_workspace.delete_workspace.handler
      Description: Deletes (deactivates) a workspace
      Role: !GetAtt ApiRole.Arn
      Events:
        DeleteWorkspace:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}
            Method: delete

  ListWorkspacesFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-list-workspaces
      CodeUri: functions/
      Handler: workspace_operations.list_workspaces.list_workspaces.handler
      Description: Lists workspaces for an account
      Role: !GetAtt ApiRole.Arn
      Events:
        GetWorkspaces:
          Type: Api
          Properties:
            Path: /accounts/{accountId}/workspaces
            Method: get

Outputs:
  CreateWorkspaceFunction:
    Description: "Create Workspace Lambda Function ARN"
    Value: !GetAtt CreateWorkspaceFunction.Arn
  
  GetWorkspaceFunction:
    Description: "Get Workspace Lambda Function ARN"
    Value: !GetAtt GetWorkspaceFunction.Arn
  
  UpdateWorkspaceFunction:
    Description: "Update Workspace Lambda Function ARN"
    Value: !GetAtt UpdateWorkspaceFunction.Arn
  
  DeleteWorkspaceFunction:
    Description: "Delete Workspace Lambda Function ARN"
    Value: !GetAtt DeleteWorkspaceFunction.Arn
  
  ListWorkspacesFunction:
    Description: "List Workspaces Lambda Function ARN"
    Value: !GetAtt ListWorkspacesFunction.Arn
    
  ApiEndpoint:
    Description: API Gateway endpoint URL for workspaces operations
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/" 