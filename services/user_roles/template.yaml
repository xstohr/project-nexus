AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: Nexus User Roles Service - Manages user roles and permissions

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for deployment
  ServiceName:
    Type: String
    Default: nexus-user-roles
  ResourcePrefix:
    Type: String
    Default: nexus-user-roles
  IAMResourcePrefix:
    Type: String
    Default: Service-UserRoles
  AccountsTableName:
    Type: String
    Description: Name of the accounts table from the Accounts service
  LogLevel:
    Type: String
    Default: INFO
    Description: Log level for Lambda functions

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.11
    Architectures:
      - x86_64
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        SERVICE_NAME: !Ref ServiceName
        SERVICE_ENVIRONMENT: !Ref Environment
        ACCOUNTS_TABLE: !Ref AccountsTableName

Conditions:
  IsProd: !Equals [ !Ref Environment, "prod" ]
  IsNotProd: !Not [ Condition: IsProd ]

Resources:
  # Roles
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IAMResourcePrefix}-ApiRole
      Path: "/nexus/service-role/user-roles/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  # Policies
  AccountsTableCRUDPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IAMResourcePrefix}-AccountsTableCRUD
      Roles:
        - !Ref ApiRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountsTableName}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountsTableName}/*"

  # Lambda Functions for Role Management
  AssignRoleFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-assign-role
      CodeUri: functions/
      Handler: role_manager.assign_role.handler
      Description: Assigns a role to a user
      Role: !GetAtt ApiRole.Arn
      Events:
        AssignRole:
          Type: Api
          Properties:
            Path: /roles/assign
            Method: post

  RevokeRoleFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-revoke-role
      CodeUri: functions/
      Handler: role_manager.revoke_role.handler
      Description: Revokes a role from a user
      Role: !GetAtt ApiRole.Arn
      Events:
        RevokeRole:
          Type: Api
          Properties:
            Path: /roles/revoke
            Method: post

  GetUserRolesFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-get-user-roles
      CodeUri: functions/
      Handler: role_manager.get_user_roles.handler
      Description: Gets roles for a user
      Role: !GetAtt ApiRole.Arn
      Events:
        GetUserRoles:
          Type: Api
          Properties:
            Path: /users/{userId}/roles
            Method: get

  ListRolesFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-list-roles
      CodeUri: functions/
      Handler: role_manager.list_roles.handler
      Description: Lists all available roles
      Role: !GetAtt ApiRole.Arn
      Events:
        ListRoles:
          Type: Api
          Properties:
            Path: /roles
            Method: get

  CheckPermissionFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-check-permission
      CodeUri: functions/
      Handler: role_manager.check_permission.handler
      Description: Checks if a user has a specific permission
      Role: !GetAtt ApiRole.Arn
      Events:
        CheckPermission:
          Type: Api
          Properties:
            Path: /permissions/check
            Method: post

Outputs:
  AssignRoleFunction:
    Description: "Assign Role Lambda Function ARN"
    Value: !GetAtt AssignRoleFunction.Arn
  
  RevokeRoleFunction:
    Description: "Revoke Role Lambda Function ARN"
    Value: !GetAtt RevokeRoleFunction.Arn
  
  GetUserRolesFunction:
    Description: "Get User Roles Lambda Function ARN"
    Value: !GetAtt GetUserRolesFunction.Arn
  
  ListRolesFunction:
    Description: "List Roles Lambda Function ARN"
    Value: !GetAtt ListRolesFunction.Arn
  
  CheckPermissionFunction:
    Description: "Check Permission Lambda Function ARN"
    Value: !GetAtt CheckPermissionFunction.Arn
    
  ApiEndpoint:
    Description: API Gateway endpoint URL for role operations
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/" 