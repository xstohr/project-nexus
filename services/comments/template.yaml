AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: Nexus Comments Service - Handles task comments with multi-tenant support

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for deployment
  ServiceName:
    Type: String
    Default: nexus-comments
  ResourcePrefix:
    Type: String
    Default: nexus-comments
  IAMResourcePrefix:
    Type: String
    Default: Service-Comments
  LogLevel:
    Type: String
    Default: INFO
    Description: Log level for Lambda functions

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.11
    Architectures:
      - x86_64
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        SERVICE_NAME: !Ref ServiceName
        SERVICE_ENVIRONMENT: !Ref Environment

Conditions:
  IsProd: !Equals [ !Ref Environment, "prod" ]
  IsNotProd: !Not [ Condition: IsProd ]

Resources:
  # Roles
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IAMResourcePrefix}-ApiRole
      Path: "/nexus/service-role/comments/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  # Policies
  CommentsTableCRUDPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IAMResourcePrefix}-CommentsTableCRUD
      Roles:
        - !Ref ApiRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CommentsTable}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CommentsTable}/*"

  SNSPublishPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IAMResourcePrefix}-SNSPublish
      Roles:
        - !Ref ApiRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref CommentEventsTopic

  # DynamoDB Table for Comments - Multi-tenant design
  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ResourcePrefix}-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK  # Format: TENANT#{tenantId}#TASK#{taskId}
          KeyType: HASH
        - AttributeName: SK  # Format: COMMENT#{commentId}
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK  # Format: TENANT#{tenantId}#USER#{userId}
              KeyType: HASH
            - AttributeName: GSI1SK  # Format: CREATED#{timestamp}
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      DeletionProtectionEnabled: !If [ IsProd, true, false ]
      Tags:
        - Key: stack-id
          Value: !Sub "${AWS::StackId}"
        - Key: stack-name
          Value: !Sub "${AWS::StackName}"
        - Key: service-name
          Value: !Ref ServiceName

  # Lambda Function for Comment Management
  CommentFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - CommentsTableCRUDPolicy
      - SNSPublishPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-comment-management
      CodeUri: functions/comment_management/
      Handler: app.lambda_handler
      Description: Manages comments on tasks
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref CommentsTable
          SNS_TOPIC_ARN: !Ref CommentEventsTopic
      Events:
        CreateComment:
          Type: Api
          Properties:
            Path: /tasks/{taskId}/comments
            Method: post
        GetComments:
          Type: Api
          Properties:
            Path: /tasks/{taskId}/comments
            Method: get
        GetComment:
          Type: Api
          Properties:
            Path: /tasks/{taskId}/comments/{commentId}
            Method: get
        UpdateComment:
          Type: Api
          Properties:
            Path: /tasks/{taskId}/comments/{commentId}
            Method: put
        DeleteComment:
          Type: Api
          Properties:
            Path: /tasks/{taskId}/comments/{commentId}
            Method: delete

  # SNS Topic for Comment Events
  CommentEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${ResourcePrefix}-events-${Environment}
      Tags:
        - Key: stack-id
          Value: !Sub "${AWS::StackId}"
        - Key: stack-name
          Value: !Sub "${AWS::StackName}"
        - Key: service-name
          Value: !Ref ServiceName

Outputs:
  CommentFunction:
    Description: "Comment Lambda Function ARN"
    Value: !GetAtt CommentFunction.Arn
  
  CommentsTable:
    Description: "Comments DynamoDB Table Name"
    Value: !Ref CommentsTable
  
  CommentEventsTopic:
    Description: "Comment Events SNS Topic ARN"
    Value: !Ref CommentEventsTopic
    
  ApiEndpoint:
    Description: API Gateway endpoint URL for comment operations
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/" 