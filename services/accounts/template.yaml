AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: Nexus Accounts Service - Manages accounts, workspaces, and user roles

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for deployment
  ServiceName:
    Type: String
    Default: nexus-accounts
  ResourcePrefix:
    Type: String
    Default: nexus-accounts
  IAMResourcePrefix:
    Type: String
    Default: Service-Accounts
  LogLevel:
    Type: String
    Default: INFO
    Description: Log level for Lambda functions

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.11
    Architectures:
      - x86_64
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        SERVICE_NAME: !Ref ServiceName
        SERVICE_ENVIRONMENT: !Ref Environment
        USER_POOL_ID: !Ref UserPool
        APP_CLIENT_ID: !Ref UserPoolClient

Conditions:
  IsProd: !Equals [ !Ref Environment, "prod" ]
  IsNotProd: !Not [ Condition: IsProd ]

Resources:
  # Roles
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IAMResourcePrefix}-ApiRole
      Path: "/nexus/service-role/accounts/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  # Policies
  AccountsTableCRUDPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IAMResourcePrefix}-AccountsTableCRUD
      Roles:
        - !Ref ApiRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountsTable}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountsTable}/*"

  CognitoUserPoolPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IAMResourcePrefix}-CognitoUserPool
      Roles:
        - !Ref ApiRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminUpdateUserAttributes
              - cognito-idp:ListUsers
            Resource: !GetAtt UserPool.Arn

  # DynamoDB Table for Accounts - Multi-tenant design
  AccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ResourcePrefix}-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: workspace_id
          AttributeType: S
      KeySchema:
        - AttributeName: PK  # Format: ACCOUNT#{accountId} or WORKSPACE#{workspaceId}
          KeyType: HASH
        - AttributeName: SK  # Format: METADATA or USER#{userId} or ROLE#{roleId}
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK  # Format: USER#{userId}
              KeyType: HASH
            - AttributeName: GSI1SK  # Format: ACCOUNT#{accountId} or WORKSPACE#{workspaceId}
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: UserRolesIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: WorkspaceIdIndex
          KeySchema:
            - AttributeName: workspace_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      DeletionProtectionEnabled: !If [ IsProd, true, false ]
      Tags:
        - Key: stack-id
          Value: !Sub "${AWS::StackId}"
        - Key: stack-name
          Value: !Sub "${AWS::StackName}"
        - Key: service-name
          Value: !Ref ServiceName

  # Lambda Functions for Account Management
  AccountManagerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
      - CognitoUserPoolPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-account-manager
      CodeUri: functions/
      Handler: account_manager.account_manager.lambda_handler
      Description: Manages account CRUD operations
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          ACCOUNTS_TABLE: !Ref AccountsTable
          USER_POOL_ID: !Ref UserPool
      Events:
        CreateAccount:
          Type: Api
          Properties:
            Path: /accounts
            Method: post
        GetAccount:
          Type: Api
          Properties:
            Path: /accounts/{accountId}
            Method: get
        UpdateAccount:
          Type: Api
          Properties:
            Path: /accounts/{accountId}
            Method: put
        DeleteAccount:
          Type: Api
          Properties:
            Path: /accounts/{accountId}
            Method: delete
        ListAccounts:
          Type: Api
          Properties:
            Path: /accounts
            Method: get

  # Lambda Functions for User Role Management
  UserRoleManagerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AccountsTableCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-user-role-manager
      CodeUri: functions/
      Handler: user_role_manager.user_role_manager.lambda_handler
      Description: Manages user roles for accounts and workspaces
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          ACCOUNTS_TABLE: !Ref AccountsTable
          USER_POOL_ID: !Ref UserPool
      Events:
        AssignUserRole:
          Type: Api
          Properties:
            Path: /accounts/{accountId}/users/roles
            Method: post
        UpdateUserRole:
          Type: Api
          Properties:
            Path: /accounts/{accountId}/users/{userId}/roles
            Method: put
        RemoveUserRole:
          Type: Api
          Properties:
            Path: /accounts/{accountId}/users/{userId}/roles
            Method: delete
        ListAccountUserRoles:
          Type: Api
          Properties:
            Path: /accounts/{accountId}/users/roles
            Method: get
        AssignWorkspaceUserRole:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/users/roles
            Method: post
        UpdateWorkspaceUserRole:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/users/{userId}/roles
            Method: put
        RemoveWorkspaceUserRole:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/users/{userId}/roles
            Method: delete
        ListWorkspaceUserRoles:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/users/roles
            Method: get

  # Cognito User Pool (reused from Auth service but with custom attributes)
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ResourcePrefix}-users-${Environment}
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: custom:accountId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: custom:role
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ResourcePrefix}-app-${Environment}
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

Outputs:
  AccountManagerFunction:
    Description: "Account Manager Lambda Function ARN"
    Value: !GetAtt AccountManagerFunction.Arn
  
  UserRoleManagerFunction:
    Description: "User Role Manager Lambda Function ARN"
    Value: !GetAtt UserRoleManagerFunction.Arn
  
  AccountsTable:
    Description: "Accounts DynamoDB Table Name"
    Value: !Ref AccountsTable
  
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
    
  ApiEndpoint:
    Description: API Gateway endpoint URL for account operations
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/" 