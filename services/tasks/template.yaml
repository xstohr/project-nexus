AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: Tasks service for Nexus application

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, prod, etc.)
  ServiceName:
    Type: String
    Default: nexus-tasks
  ResourcePrefix:
    Type: String
    Default: nexus-tasks
  IAMResourcePrefix:
    Type: String
    Default: Service-Tasks
  TasksTableName:
    Type: String
    Default: Tasks
    Description: DynamoDB table name for tasks
  AccountsTableName:
    Type: String
    Default: Accounts
    Description: DynamoDB table name for accounts
  LogLevel:
    Type: String
    Default: INFO
    Description: Log level for Lambda functions
    
Globals:
  Function:
    Runtime: python3.9
    MemorySize: 256
    Timeout: 10
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        SERVICE_NAME: !Ref ServiceName
        SERVICE_ENVIRONMENT: !Ref Environment
    Architectures:
      - x86_64

Conditions:
  IsProd: !Equals [ !Ref Environment, "prod" ]
  IsNotProd: !Not [ Condition: IsProd ]

Resources:
  # DynamoDB Table for Tasks
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-${TasksTableName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      DeletionProtectionEnabled: !If [ IsProd, true, false ]
      Tags:
        - Key: stack-id
          Value: !Sub "${AWS::StackId}"
        - Key: stack-name
          Value: !Sub "${AWS::StackName}"
        - Key: service-name
          Value: !Ref ServiceName

  # Roles
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IAMResourcePrefix}-ApiRole
      Path: "/nexus/service-role/tasks/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  # Policies
  TablesCRUDPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IAMResourcePrefix}-TablesCRUD
      Roles:
        - !Ref ApiRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TasksTable}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TasksTable}/*"
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Environment}-${AccountsTableName}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Environment}-${AccountsTableName}/*"

  # Lambda Functions
  CreateTaskFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - TablesCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-create-task
      Description: Creates a new task in a workspace
      CodeUri: ./
      Handler: functions/task_operations/create_task/create_task.handler
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ACCOUNTS_TABLE: !Sub ${Environment}-${AccountsTableName}
      Events:
        CreateTaskApi:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/tasks
            Method: post

  GetTaskFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - TablesCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-get-task
      Description: Retrieves task details
      CodeUri: ./
      Handler: functions/task_operations/get_task/get_task.handler
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ACCOUNTS_TABLE: !Sub ${Environment}-${AccountsTableName}
      Events:
        GetTaskApi:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/tasks/{taskId}
            Method: get

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - TablesCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-update-task
      Description: Updates a task
      CodeUri: ./
      Handler: functions/task_operations/update_task/update_task.handler
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ACCOUNTS_TABLE: !Sub ${Environment}-${AccountsTableName}
      Events:
        UpdateTaskApi:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/tasks/{taskId}
            Method: put

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - TablesCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-delete-task
      Description: Deletes a task
      CodeUri: ./
      Handler: functions/task_operations/delete_task/delete_task.handler
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ACCOUNTS_TABLE: !Sub ${Environment}-${AccountsTableName}
      Events:
        DeleteTaskApi:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/tasks/{taskId}
            Method: delete

  ListTasksFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - TablesCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-list-tasks
      Description: Lists tasks in a workspace
      CodeUri: ./
      Handler: functions/task_operations/list_tasks/list_tasks.handler
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ACCOUNTS_TABLE: !Sub ${Environment}-${AccountsTableName}
      Events:
        ListTasksApi:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/tasks
            Method: get

  AssignTaskFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - TablesCRUDPolicy
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-assign-task
      Description: Assigns a task to a user
      CodeUri: ./
      Handler: functions/task_operations/assign_task/assign_task.handler
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ACCOUNTS_TABLE: !Sub ${Environment}-${AccountsTableName}
      Events:
        AssignTaskApi:
          Type: Api
          Properties:
            Path: /workspaces/{workspaceId}/tasks/{taskId}/assign
            Method: post

Outputs:
  TasksTable:
    Description: DynamoDB table for tasks
    Value: !Ref TasksTable
  CreateTaskFunction:
    Description: Create Task Lambda Function ARN
    Value: !GetAtt CreateTaskFunction.Arn
  GetTaskFunction:
    Description: Get Task Lambda Function ARN
    Value: !GetAtt GetTaskFunction.Arn
  UpdateTaskFunction:
    Description: Update Task Lambda Function ARN
    Value: !GetAtt UpdateTaskFunction.Arn
  DeleteTaskFunction:
    Description: Delete Task Lambda Function ARN
    Value: !GetAtt DeleteTaskFunction.Arn
  ListTasksFunction:
    Description: List Tasks Lambda Function ARN
    Value: !GetAtt ListTasksFunction.Arn
  AssignTaskFunction:
    Description: Assign Task Lambda Function ARN
    Value: !GetAtt AssignTaskFunction.Arn
  ApiEndpoint:
    Description: API Gateway endpoint URL for task operations
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/" 