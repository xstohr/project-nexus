AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: Nexus - Project Management Platform

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for deployment
  ProjectName:
    Type: String
    Default: nexus
    Description: Project name used for resource prefixing
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
    Description: Log level for Lambda functions
  DomainName:
    Type: String
    Default: ""
    Description: Optional domain name for custom API Gateway domain

Conditions:
  IsProd: !Equals [ !Ref Environment, "prod" ]
  IsNotProd: !Not [ Condition: IsProd ]
  HasDomainName: !Not [ !Equals [ !Ref DomainName, "" ] ]

Resources:
  # Nested stacks
  AccountsStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/accounts/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-accounts
        IAMResourcePrefix: Service-Accounts

  TasksStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/tasks/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-tasks
        IAMResourcePrefix: Service-Tasks
        AccountsTableName: !GetAtt AccountsStack.Outputs.AccountsTableName

  WorkspacesStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/workspaces/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-workspaces
        IAMResourcePrefix: Service-Workspaces
        AccountsTableName: !GetAtt AccountsStack.Outputs.AccountsTableName

  CommentsStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/comments/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-comments
        IAMResourcePrefix: Service-Comments
        AccountsTableName: !GetAtt AccountsStack.Outputs.AccountsTableName

  UserRolesStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/user_roles/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-user-roles
        IAMResourcePrefix: Service-UserRoles
        AccountsTableName: !GetAtt AccountsStack.Outputs.AccountsTableName

  TimeTrackingStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/time_tracking/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-time-tracking
        IAMResourcePrefix: Service-TimeTracking
        AccountsTableName: !GetAtt AccountsStack.Outputs.AccountsTableName

  AuthStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/auth/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-auth
        IAMResourcePrefix: Service-Auth

  ApiStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/api/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-api
        IAMResourcePrefix: Service-API
        
  ApiDocsStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/api_docs/template.yaml
      Parameters:
        Environment: !Ref Environment
        LogLevel: !Ref LogLevel
        ResourcePrefix: !Sub ${ProjectName}-api-docs
        IAMResourcePrefix: Service-ApiDocs

  # Custom Domain (Optional)
  ApiDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: HasDomainName
    Properties:
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasDomainName
    Properties:
      DomainName: !Ref ApiDomain
      RestApiId: !GetAtt ApiStack.Outputs.ApiId
      Stage: !Sub ${Environment}

Outputs:
  ApiEndpoint:
    Description: "API Gateway Endpoint"
    Value: !GetAtt ApiStack.Outputs.ApiEndpoint
  
  ApiDocsEndpoint:
    Description: "API Documentation Endpoint"
    Value: !GetAtt ApiDocsStack.Outputs.SwaggerUIEndpoint
  
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !GetAtt AuthStack.Outputs.UserPoolId
  
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !GetAtt AuthStack.Outputs.UserPoolClientId 